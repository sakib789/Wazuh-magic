.. 

.. meta::
   :description: Learn how to use Wazuh API to generate reports.

Automated Vulnerability Detection Summary Mail Reporting with Wazuh
===================================================================

The great thing about Wazuh is that it's entirely open-source. You can seamlessly connect it with other software and tools, making it even more compelling. Plus, you have the freedom to customize it as you like. In this article, we'll dive into using the Wazuh API for automatic vulnerability reporting via email, using some simple Linux tools.

OS: `Ubuntu 22.04.4 LTS (Jammy Jellyfish) <https://releases.ubuntu.com/jammy>`__.


**Wazuh Manager version: 4.7.5**

**Tools:**
Postfix, Cron Job


First, set up an SMTP server on your Wazuh server.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. Run this command to install the required packages. If prompted about the **Mail server configuration type**, select **No configuration**.

   .. tabs::

      .. group-tab:: CentOS

         .. code-block:: console

            # yum update && yum install postfix mailx cyrus-sasl cyrus-sasl-plain

      .. group-tab:: Ubuntu

         .. code-block:: console

            # apt-get update && apt-get install postfix mailutils libsasl2-2 ca-certificates libsasl2-modules

#. Append these lines to ``/etc/postfix/main.cf`` to configure Postfix. Create the file if missing.

   .. tabs::

      .. group-tab:: CentOS

         .. code-block:: cfg

            relayhost = [smtp.gmail.com]:587
            smtp_sasl_auth_enable = yes
            smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
            smtp_sasl_security_options = noanonymous
            smtp_tls_CAfile = /etc/ssl/certs/ca-bundle.crt
            smtp_use_tls = yes

      .. group-tab:: Ubuntu

         .. code-block:: cfg

            relayhost = [smtp.gmail.com]:587
            smtp_sasl_auth_enable = yes
            smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
            smtp_sasl_security_options = noanonymous
            smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
            smtp_use_tls = yes
            smtpd_relay_restrictions = permit_mynetworks, permit_sasl_authenticated, defer_unauth_destination

#. Set the sender email address and password. Replace ``<USERNAME>`` and ``<PASSWORD>`` with your own data.

   .. code-block:: console

      # echo [smtp.gmail.com]:587 <USERNAME>@gmail.com:<PASSWORD> > /etc/postfix/sasl_passwd
      # postmap /etc/postfix/sasl_passwd
      # chmod 400 /etc/postfix/sasl_passwd

   .. note::

      The password must be an `App Password <https://security.google.com/settings/security/apppasswords>`__. App Passwords can only be used with accounts that have `2-Step Verification <https://myaccount.google.com/signinoptions/two-step-verification>`__ turned on.

#. Secure your password DB file.

   .. code-block:: console

      # chown root:root /etc/postfix/sasl_passwd /etc/postfix/sasl_passwd.db
      # chmod 0600 /etc/postfix/sasl_passwd /etc/postfix/sasl_passwd.db

#. Restart Postfix.


   .. tabs::

      .. group-tab:: Systemd

         .. code-block:: console

            # systemctl restart postfix

      .. group-tab:: SysV init

         .. code-block:: console

            # service postfix restart

#. Run the following command to test the configuration. Replace ``you@example.com`` with your email address. Check, then, that you receive this test email.

   .. code-block:: console

      # echo "Test mail from postfix" | mail -s "Test Postfix" -r "you@example.com" you@example.com





Next, make a directory to keep all the script files.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. Make directory

   .. code-block:: console

    # mkdir /tmp/vulnerability

#. Go to that directory

   .. code-block:: console

    # cd /tmp/vulnerability/


#. Create a file name ``vuln_dash.py``

   .. code-block:: console

     # vi vuln_dash.py

#. Add the following script to that file.


#. Create another file name ``vuln_lib.py``

   .. code-block:: console

     #vi vuln_lib.py

Add the following script to that file.



Update the Configuration section of the vuln_lib.py file with the API user, password, and Wazuh server address.
 
   # Configuration
    protocol = 'https'
    host = '192.168.65.128'  # Supply Wazuh server address
    port = 55000
    user = 'wazuh-wui'   # Supply API credentials
    password = 'wazuh-wui_Password!'

You can find the password of API at the end of this configuration file.

/usr/share/wazuh-dashboard/data/wazuh/config/wazuh.yml





Run the command below to make the scripts executable


 sudo chmod +x vuln*


Now run the command to configure the cron job

crontab -e

If you are configuring the cronjob for the first time it will prompt you to select a text editor.
 
Select the text editor you like and add this cronjob configuration at the end of the text.

0 9 * * * python3 /tmp/vulnerability/vuln_dash.py >> /tmp/vulnerability/vuln_summary.csv && echo "Vulnerability Summary" | mail -s "vulnerability summary Report" -r "your_mail@mail.com"your_mail@mail.com -A /tmp/vulnerability/vuln_summary.csv


This configuration will send a summary of the vulnerability scan as a CSV file in the mail attachment every day at 9 am.


Replace your_mail@mail.com with the mail address where you want to send the summary report.

